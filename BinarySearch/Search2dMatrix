# You are given an m x n 2-D integer array matrix and an integer target.
# Each row in matrix is sorted in non-decreasing order.
# The first integer of every row is greater than the last integer of the previous row.
# Return true if target exists within matrix or false otherwise

class Solution:
    def searchMatrix(self, matrix: list[list[int]], target: int) -> bool:
        ROWS, COLS = len(matrix), len(matrix[0])

        l,r = 0, ROWS * COLS - 1
        while l <= r:
            m = l + (r-l//2)
            row, col = m // COLS, m % COLS
            if target > matrix[row][col]:
                l = m + 1
            elif target < matrix[row][col]:
                r = m - 1
            else:
                return True
        return False


sol = Solution()
matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target=3
print(sol.searchMatrix(matrix,target))

# Time : O(n), Space : O(n)