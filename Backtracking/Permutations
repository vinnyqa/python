# Given an array nums of unique integers, return all the possible permutations. You may return the answer in any order.

class Solution:
    def permute(self, nums: list[int]) -> list[list[int]]:
        if len(nums) == 0:
            return [[]]
        
        perms = self.permute(nums[1:]) #Call Recursive Func without First Element
        res = []
        for p in perms:
            for i in range(len(p) + 1): #len(p) + 1 cox we can add it to the end of permutation as well
                p_copy = p.copy() #Create a copy of Permutation
                p_copy.insert(i, nums[0]) #
                res.append(p_copy) #Append p_copy to result
        return res

sol = Solution()
nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
print(sol.permute(nums))
# Time : O(n!*n^2), Space : O(n!*n)