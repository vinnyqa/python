# You are given two strings s1 and s2.
# Return true if s2 contains a permutation of s1, or false otherwise. That means if a permutation of s1 exists as a substring of s2, then return true.
# Both strings only contain lowercase letters.

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count1 = {}
        for c in s1: #Navigate thru 1st string & add in hashmap count1
            count1[c] = 1 + count1.get(c, 0)
                    
        need = len(count1) #Initialize Length of Hashmap Count1 to Need
        for i in range(len(s2)): #Navigate thru 2nd string
            count2, cur = {}, 0 #Initialize count2 Hashmap for 2nd String
            for j in range(i, len(s2)): #Use j to navigate from i to len(s2)
                count2[s2[j]] = 1 + count2.get(s2[j], 0)
                if count1.get(s2[j], 0) < count2[s2[j]]: 
                    break
                if count1.get(s2[j], 0) == count2[s2[j]]:
                    cur += 1
                if cur == need:
                    return True
        return False
            
sol = Solution()
s1="ab"
s2="lecabee"
print(sol.checkInclusion(s1,s2))
# Time : O(n*m), Space : O(1)