# You are given an array of integers nums and an integer k. There is a sliding window of size k that starts at the left edge of the array. The window slides one position to the right until it reaches the right edge of the array.
# Return a list that contains the maximum element in the window at each step.
# MONOTONICALLY DECREASING QUEUE  

from collections import deque

class Solution:
    def maxSlidingWindow(self, nums: list[int], k: int) -> list[int]:
        output = [] 
        q = deque()  # index
        l = r = 0

        while r < len(nums): #While r is inbounds
            # Pop Smaller values from q
            while q and nums[q[-1]] < nums[r]: 
                q.pop()
            q.append(r)

            # Remove Left Val from Window
            if l > q[0]:
                q.popleft()

            if (r + 1) >= k:
                output.append(nums[q[0]])
                l += 1
            r += 1

        return output

sol = Solution()
nums=[1,2,1,0,4,2,6]
k=3
print(sol.maxSlidingWindow(nums,k))
# Time : O(n), Space : O(n)