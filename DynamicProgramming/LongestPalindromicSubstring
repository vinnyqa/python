# Given a string s, return the longest substring of s that is a palindrome.
# A palindrome is a string that reads the same forward and backward.
# If there are multiple palindromic substrings that have the same length, return any one of them.

class Solution:
    def longestPalindrome(self, s: str) -> str:
        resIdx = 0
        resLen = 0

        for i in range(len(s)):
            # odd length
            l, r = i, i
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen: #Verify Length of Palindrome by (r-l+1) is greater than current Result Length
                    resIdx = l
                    resLen = r - l + 1
                l -= 1
                r += 1

            # even length
            l, r = i, i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    resIdx = l
                    resLen = r - l + 1
                l -= 1
                r += 1

        return s[resIdx : resIdx + resLen]

sol = Solution()
s="ababd"
print(sol.longestPalindrome(s))
# Time : O(n^2), Space : O(1)
# ITERATIVE BINARY SEARCH