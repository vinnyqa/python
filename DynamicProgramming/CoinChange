# You are given an integer array coins representing coins of different denominations (e.g. 1 dollar, 5 dollars, etc) and an integer amount representing a target amount of money.
# Return the fewest number of coins that you need to make up the exact target amount. If it is impossible to make up the amount, return -1.
# You may assume that you have an unlimited number of each coin.

class Solution:
    def coinChange(self, coins: list[int], amount: int) -> int:
        dp = [amount+1] * (amount+1) #We are going from 0 to amount+1
        dp[0] = 0

        for a in range(1,amount+1): #Bottom Up
            for c in coins:
                if a - c >= 0:
                    dp[a] = min(dp[a], 1 + dp[a-c]) #Recurrence Relation
                    
        return dp[amount] if dp[amount] != (amount+1) else -1
        #If it's not the default value we initialized (amount+1)

sol = Solution()
coins=[1,2,5]
amount=11
output = 3
print(sol.coinChange(coins,amount))
# Time : O(n*t), Space : O(t)
# DP BOTTOM-UP