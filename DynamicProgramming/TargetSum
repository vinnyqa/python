# You are given an array of integers nums and an integer target.
# For each number in the array, you can choose to either add or subtract it to a total sum.
# For example, if nums = [1, 2], one possible sum would be "+1-2=-1".
# If nums=[1,1], there are two different ways to sum the input numbers to get a sum of 0: "+1-1" and "-1+1".
# Return the number of different ways that you can build the expression such that the total sum equals target.

class Solution:
    def findTargetSumWays(self, nums: list[int], target: int) -> int:
        def backtrack(i, total):
            if i ==len(nums):
                return  total == target
            
            return (backtrack(i + 1, total + nums[i]) + 
                    backtrack(i + 1, total - nums[i]))
                
        return backtrack(0, 0)

sol = Solution()
nums=[2,2,2]
target=4
output = 0
print(sol.findTargetSumWays(nums,target))
# Time : O(2^n), Space : O(n)
# RECURSION HASHSET