# Given an integer array nums, return the length of the longest strictly increasing subsequence.
# A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the relative order of the remaining characters.
# For example, "cat" is a subsequence of "crabt".

class Solution:
    def lengthOfLIS(self, nums: list[int]) -> int:
        LIS = [1] * len(nums)

        for i in range(len(nums) -1, -1, -1):
            for j in range(i+1, len(nums)):
                if nums[i] < nums[j]:
                    LIS[i] = max(LIS[i], 1 + LIS[j])
        return max(LIS)

sol = Solution()
nums=[9,1,4,2,3,3,7]
print(sol.lengthOfLIS(nums))
# Time : O(n^2), Space : O(n)
# DYNAMIC PROGRAMMING (BOTTOM-UP)