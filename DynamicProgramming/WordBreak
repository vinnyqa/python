# Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of dictionary words.
# You are allowed to reuse words in the dictionary an unlimited number of times. You may assume all dictionary words are unique.

class Solution:
    def wordBreak(self, s: str, wordDict: list[str]) -> bool:
        wordSet = set(wordDict)

        def dfs(i):
            if i == len(s):
                return True
            
            for j in range(i, len(s)):
                if s[i : j + 1] in wordSet:
                    if dfs(j + 1):
                        return True
            return False
        
        return dfs(0)

sol = Solution()
s="neetcode"
wordDict=["neet","vinny"]
output = True
print(sol.wordBreak(s,wordDict))
# Time : O(t*m^n), Space : O(n)
# RECURSION HASHSET