# Given two strings text1 and text2, return the length of the longest common subsequence between the two strings if one exists, otherwise return 0.
# A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the relative order of the remaining characters.
# For example, "cat" is a subsequence of "crabt".
# A common subsequence of two strings is a subsequence that exists in both strings.

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        def dfs(i, j):
            if i == len(text1) or j == len(text2):
                return 0
            if text1[i] == text2[j]:
                return 1 + dfs(i + 1, j + 1)
            return max(dfs(i + 1, j), dfs(i, j + 1))
        
        return dfs(0, 0)

sol = Solution()
text1="crabt"
text2="cat"
output = 3
print(sol.longestCommonSubsequence(text1,text2))
# Time : O(2^m+n), Space : O(m+n)
# RECURSION HASHSET