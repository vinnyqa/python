# Given two strings text1 and text2, return the length of the longest common subsequence between the two strings if one exists, otherwise return 0.
# A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the relative order of the remaining characters.
# For example, "cat" is a subsequence of "crabt".
# A common subsequence of two strings is a subsequence that exists in both strings.

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        def backtrack(i, total):
            if i ==len(nums):
                return  total == target
            
            return (backtrack(i + 1, total + nums[i]) + 
                    backtrack(i + 1, total - nums[i]))
                
        return backtrack(0, 0)

sol = Solution()
nums=[2,2,2]
target=4
output = 0
print(sol.longestCommonSubsequence(s,wordDict))
# Time : O(t*m^n), Space : O(n)
# RECURSION HASHSET