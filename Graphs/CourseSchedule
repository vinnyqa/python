# You are given an array prerequisites where prerequisites[i] = [a, b] indicates that you must take course b first if you want to take course a.
# The pair [0, 1], indicates that must take course 1 before taking course 0.
# There are a total of numCourses courses you are required to take, labeled from 0 to numCourses - 1.
# Return true if it is possible to finish all courses, otherwise return false.

class Solution:
    def canFinish(self, numCourses: int, prerequisites: list[list[int]]) -> bool:
        # Map each course to its prerequisites
        preMap = {i: [] for i in range(numCourses)}
        for crs, pre in prerequisites:
            preMap[crs].append(pre)
            print(preMap)

        # Store all courses along the current DFS path
        cycle = set()

        def dfs(crs):
            if crs in cycle: ##If course is already in visitSet, Cycle detected
                # Cycle detected
                return False
            if preMap[crs] == []:
                return True

            cycle.add(crs) #Add the course to visitSet if none of the above conditions is true and run DFS on it as below
            for pre in preMap[crs]: #Run DFS on prerequisit of the course
                if not dfs(pre):
                    return False
            cycle.remove(crs)
            preMap[crs] = []
            return True

        for c in range(numCourses):
            if not dfs(c):
                return False
        return True

sol = Solution()
numCourses = 2
prerequisites = [[0,1]] 
print(sol.canFinish(numCourses,prerequisites))
# Time : O(V+E), Space : O(V+E)