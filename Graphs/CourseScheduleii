# You are given an array prerequisites where prerequisites[i] = [a, b] indicates that you must take course b first if you want to take course a.
# The pair [0, 1], indicates that must take course 1 before taking course 0.
# There are a total of numCourses courses you are required to take, labeled from 0 to numCourses - 1.
# Return a valid ordering of courses you can take to finish all courses. If there are many valid answers, return any of them. If it's not possible to finish all courses, return an empty array.

class Solution:
    def findOrder(self, numCourses: int, prerequisites: list[list[int]]) -> bool:
        # Build adjacency list of prereqs
        preMap = {i: [] for i in range(numCourses)}
        for crs, pre in prerequisites:
            preMap[crs].append(pre)

        #A course has 3 possible states:
        # Visited -> crs has been added to the output
        # Visiting -> crs not added to output, but added to cycle
        # Unvisited -> crs not added to output or cycle

        # Store all courses along the current DFS path
        output = []
        visit, cycle = set(), set()

        def dfs(crs):
            if crs in cycle: ##If course is already in Cycle, Cycle detected
                return False
            if crs in visit: ##If course is already in Visit, Cycle detected
                    return True

            cycle.add(crs) #Add the course to visitSet if none of the above conditions is true and run DFS on it as below
            for pre in preMap[crs]: #Run DFS on prerequisit of the course
                if dfs(pre) == False:
                    return False
            cycle.remove(crs)
            visit.add(crs)
            output.append(crs)
            return True

        for c in range(numCourses):
            if dfs(c) == False:
                return []
        return output

sol = Solution()
numCourses = 3
prerequisites = [[1,0]]
print(sol.findOrder(numCourses,prerequisites))
# Time : O(V+E), Space : O(V+E)