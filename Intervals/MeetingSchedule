# Given an array of meeting time interval objects consisting of start and end times [[start_1,end_1],[start_2,end_2],...] (start_i < end_i), determine if a person could add all meetings to their schedule without any conflicts.

#Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end

class Solution:
    def canAttendMeetings(self, intervals: list[Interval]) -> bool:
        intervals.sort(key=lambda i:i.start) #Inline function to Sort Intervals using Start Time

        for i in range(1, len(intervals)):
            i1 = intervals[i - 1] #1st Interval
            i2 = intervals[i] #2nd Interval

            if i1.end > i2.start: #End Time of 1st Interval > Start Time of 2nd Interval
                return False
        return True

intervals = [(5,8),(9,15)]
output: true

intervals=[(0,30),(5,10),(15,20)]
output= False
# Time : O(nlogn), Space : O(1)
